// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var iced, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  this.SERVER_HOST = "http://localhost:5001";

  this.AJAX_TIMEOUT_MS = 10;

  this.SYNC_KEYS = {
    BG_IMG_URL: "background_image_url"
  };

  this.setData = function(dic_key, val, defer_cb) {
    var dic;
    if (defer_cb == null) {
      defer_cb = (function() {});
    }
    dic = {};
    dic[dic_key] = val;
    return chrome.storage.local.set(dic, (function() {
      return defer_cb();
    }));
  };

  this.getData = function(key, default_value, defer_cb) {
    var items, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/nubela/Workspace/cliqz-newtab-chrome-ext/src/newtab.coffee",
          funcname: "getData"
        });
        chrome.storage.local.get(key, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return items = arguments[0];
            };
          })(),
          lineno: 14
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (key in items) {
          defer_cb(items[key]);
        } else {
          return defer_cb(default_value);
        }
      };
    })(this));
  };

  this.fetchBackgroundImage = function(defer_cb) {
    if (defer_cb == null) {
      defer_cb = (function() {});
    }
    return $.ajax({
      timeout: AJAX_TIMEOUT_MS,
      type: "GET",
      url: SERVER_HOST + "/unsplash/url/",
      dataType: "json",
      crossDomain: true,
      success: function(data) {
        var url;
        if (data["status"] === "ok") {
          url = data.url;
          setData(SYNC_KEYS.BG_IMG_URL, "" + SERVER_HOST + url);
          defer_cb(true);
          return;
        }
        return defer_cb(false);
      },
      error: function() {
        return defer_cb(false);
      }
    });
  };

}).call(this);
